# UI Component Style Guide

This guide provides standards for creating consistent and maintainable UI components across the application UI
.

---

## 1. Page & Content Layout

### Page Container

- **Rule:** Use `max-w-5xl mx-auto px-8 py-8` for main page containers.
- **Purpose:** Enforces a consistent 80% width and center alignment on desktop views.
- **Example:**
  ```tsx
  // ✅ DO: Use consistent page layout
  <div className="max-w-5xl mx-auto px-8 py-8">
    {/* Page content goes here */}
  </div>
  ```

### Content Card

- **Rule:** Use `bg-white rounded-lg shadow-md p-6` for containers that wrap main content sections (tables, forms, etc.).
- **Purpose:** Creates a consistent, elevated card-based layout for content.
- **Example:**
  ```tsx
  // ✅ DO: Use a styled container for content sections
  <div className="bg-white rounded-lg shadow-md p-6">
    {/* Table, list, or form content */}
  </div>
  ```

---

## Hydration-Safe Client Component Pattern

- **Rule:** When building client components that depend on browser-only state (such as scroll position, window size, or mount status), always use a `mounted` state pattern to avoid hydration mismatches.
- **How:**
  - Do not apply scroll-dependent or dynamic classes (e.g., `fixed`, `bg-white`, etc.) during the initial render.
  - Render only the base class on the server.
  - Apply dynamic classes only after the component has mounted on the client (using a `mounted` state).
- **Async Data Fetching Rule:**
  - **All async data fetching in client components must be done with `useEffect` and `useState`.**
  - **Never use `await` at the top level of a client component.**
  - This ensures React hydration safety and avoids runtime errors in Next.js app directory.
  - Example:
    ```tsx
    // ✅ DO: Fetch data in useEffect
    useEffect(() => {
      async function fetchData() {
        const res = await fetch('/api/data');
        const data = await res.json();
        setData(data);
      }
      fetchData();
    }, []);
    ```
    ```tsx
    // ❌ DON'T: Use await at the top level
    // const res = await fetch('/api/data'); // Not allowed in client components
    ```
- **Why:**
  - This prevents hydration errors where the server-rendered HTML does not match the client-rendered HTML.
  - Typical issues include headers/navbars that become `fixed` or change style on scroll, or any component using browser APIs or time-based values.
- **Action:**
  - Review all client components for this pattern, especially headers, navbars, and any component that uses browser APIs or time-based values.
  - This rule is part of the UI style guide and must be followed for all interactive client components.

**Example:**
```tsx
const [mounted, setMounted] = useState(false);
useEffect(() => { setMounted(true); }, []);
return (
  <header className={mounted && isScrolled ? "fixed ..." : ""}>
    {/* ... */}
  </header>
);
```

---

## 2. Forms

### Input Fields

- **Rule:** Use the following classes for consistent input field styling.
- **Example:**
  ```tsx
  // ✅ DO: Use consistent input field styling
  <input
    type="text"
    className="mt-1 block w-full border border-gray-400 rounded-xl focus:border-blue-500 focus:ring-blue-500 px-4 py-3 text-base"
  />
  ```

### Labels

- **Rule:** Use the following classes for consistent label styling.
- **Example:**
  ```tsx
  // ✅ DO: Use consistent label styling
  <label className="block text-sm font-medium text-gray-700">
    Field Label
  </label>
  ```

### Checkboxes

- **Rule:** Use the `custom-checkbox` implementation for a larger, more visible checkbox with a custom tick mark.
- **Click Handling:** Always include `onClick={(e) => e.stopPropagation()}` on the `input` to prevent unintended event bubbling, especially inside clickable table rows or containers.
- **Example:**
  ```tsx
  // ✅ DO: Use consistent checkbox styling with stopPropagation
  <label className="flex flex-col items-center">
    <span className="relative flex items-center justify-center">
      <input
        type="checkbox"
        className="custom-checkbox"
        checked={isChecked}
        onChange={handleChange}
        onClick={(e) => e.stopPropagation()}
      />
      <span className="custom-checkbox-tick">
        {isChecked && (
          <svg className="w-6 h-6 text-black" fill="none" stroke="currentColor" strokeWidth="4" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l5 5L19 7" />
          </svg>
        )}
      </span>
    </span>
    <span className="mt-2 text-xs text-center select-none break-words max-w-[6rem]">Checkbox Label</span>
  </label>
  ```

- **Checkbox Group Layout:**
  ```tsx
  // ✅ DO: Use a CSS grid for checkbox group layout
  <div className="custom-grid-table mt-4" style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '0.5rem' }}>
    {/* Checkbox items */}
  </div>
  ```

- **Required CSS (`globals.css`):**
  ```css
  .custom-checkbox {
    @apply h-6 w-6 border-2 border-gray-400 rounded-lg cursor-pointer appearance-none relative bg-white;
  }
  .custom-checkbox:checked {
    @apply bg-blue-600 border-blue-600;
  }
  .custom-checkbox-tick {
    @apply absolute inset-0 flex items-center justify-center pointer-events-none;
  }
  ```

---

## 3. Buttons & Icons

### Button Styling

- **Primary Action (Save/Submit):** Blue background.
- **Secondary Action (Cancel):** Light teal background to be non-destructive.
- **Example:**
  ```tsx
  // ✅ DO: Use consistent button styling with icons
  <button type="submit" className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md flex items-center gap-2">
    <FaSave />
    Save Changes
  </button>

  <button type="button" className="bg-teal-100 hover:bg-teal-200 text-teal-800 px-4 py-2 rounded-md flex items-center gap-2">
    <FaBan />
    Cancel
  </button>
  ```

### Standard Action Icons

- **Rule:** Use the following icons from `react-icons/fa` for all common actions to ensure a consistent visual language.
- **Implementation:** Use `.icon-btn` with a modifier (e.g., `.icon-btn-delete`) for standalone icon buttons.

| Action         | Icon           | Usage                                        |
| -------------- | -------------- | -------------------------------------------- |
| **Cancel/Abort**| `<FaBan />`      | Stop a current action (e.g., in a modal).    |
| **Save**       | `<FaFolderOpen />`| Save or update data.                         |
| **Delete**     | `<FaTrashAlt />` | **MANDATORY.** Never use `<FaTrash />`.        |
| **Edit**       | `<FaEdit />`     | Edit an item.                                |
| **Upload**     | `<FaUpload />`   | Upload a file.                               |

---

## 4. Tooltips

- **Rule:** Use the standardized `DetailsTooltip` component, which renders in a React Portal, for all mouse-over popovers that show detailed information. This prevents the tooltip from being clipped by parent containers with scrollbars.
- **Trigger:** The tooltip should be triggered on hover of specific table cells. Use a debounced handler to prevent flickering.
- **User Guidance:** Always place a descriptive note above the table to inform users about the hover behavior.

### Tooltip Implementation

The implementation involves three parts: a portal-based `DetailsTooltip` component, state management, and hover handlers in the parent component.

```typescript
// 1. The DetailsTooltip Component (renders with createPortal)
function UserDetailsTooltip({ user, anchorRect, onClose }: { user: UserProfileDTO, anchorRect: DOMRect | null, onClose: () => void }) {
  if (!anchorRect) return null;

  // Always show tooltip to the right of the anchor cell, never above the columns
  const spacing = 8;
  const tooltipWidth = 320; // px, adjust as needed
  let top = anchorRect.top;
  let left = anchorRect.right + spacing;

  // Clamp position to stay within the viewport
  const estimatedHeight = 300; // Heuristic average height
  if (top + estimatedHeight > window.innerHeight) {
    top = window.innerHeight - estimatedHeight - spacing;
  }
  if (top < spacing) {
    top = spacing;
  }
  if (left + tooltipWidth > window.innerWidth) {
    left = window.innerWidth - tooltipWidth - spacing;
  }

  const style: React.CSSProperties = {
    position: 'fixed',
    top,
    left,
    zIndex: 9999,
    width: tooltipWidth,
    // ... other styles: background, border, shadow, etc.
  };

  return ReactDOM.createPortal(
    <div style={style} tabIndex={-1} className="admin-tooltip">
      {/* Sticky, always-visible close button */}
      <div className="sticky top-0 right-0 z-10 bg-white flex justify-end">
        <button
          onClick={onClose}
          className="w-10 h-10 text-2xl bg-red-500 hover:bg-red-600 text-white rounded-full shadow-lg flex items-center justify-center transition-all"
          aria-label="Close tooltip"
        >
          &times;
        </button>
      </div>
      {/* ... Tooltip content ... */}
    </div>,
    document.body
  );
}
```

#### Tooltip Close Button & Positioning Standards
- All tooltips must include a close button (×) in the top-right corner, always visible and fixed above scrollable content using `sticky top-0 right-0 z-10 bg-white flex justify-end`.
- The close button must be large and visually prominent: `w-10 h-10 text-2xl bg-red-500 hover:bg-red-600 text-white rounded-full shadow-lg flex items-center justify-center transition-all`.
- The tooltip must always appear to the right of the hovered cell for the first two columns, never above or covering them. Use `anchorRect.right + spacing` for left, and `anchorRect.top` for top, clamped to the viewport.
- Remove any logic that places the tooltip to the left of the cell.
- The tooltip should only close when the close button is clicked, not on mouse leave or blur.
- This ensures accessibility, usability, and a consistent experience across all pages.

- **References:**
  - Manage usage page: [`/admin/manage-usage`](mdc:http:/localhost:3000/admin/manage-usage)
  - Example file: `src/app/admin/manage-usage/ManageUsageClient.tsx`

---

## 5. Pagination

- **Rule:** Always fetch the true total count of items from the backend for paginated lists.
  - The backend must return the total count in the `x-total-count` response header for paginated GET requests.
  - The proxy handler (`src/lib/proxyHandler.ts`) must forward the `x-total-count` header from the backend to the frontend for all GET requests.
    ```typescript
    // In createProxyHandler, after fetching from the backend:
    if (method === 'GET') {
      const totalCount = apiRes.headers.get('x-total-count');
      if (totalCount) {
        res.setHeader('x-total-count', totalCount);
      }
      const data = await apiRes.json();
      res.status(apiRes.status).json(data);
      return;
    }
    ```
- **Frontend pagination logic must use the value from the `x-total-count` header** to calculate:
  - Total pages: `totalPages = Math.ceil(totalCount / pageSize)`
  - Enable/disable Previous/Next buttons based on the current page and total pages.
  - Display the correct range: "Showing X to Y of Z items".
- **Do not fallback to `rows.length` for total count unless the header is truly missing.**
- **Example of correct usage:**
  See [`/admin/events/[id]/tickets/list`](http://localhost:3000/admin/events/1/tickets/list) for a working implementation that matches the admin dashboard.

### UI/UX Consistency
- Pagination controls must use:
  - Previous/Next buttons on the left/right.
  - Page status in the center ("Page X of Y").
  - Range and total count below ("Showing X to Y of Z items").
- Use the same button and layout logic as in `src/components/EventList.tsx` and the admin dashboard.

### Example Implementation
```tsx
const totalPages = Math.ceil(totalCount / pageSize);
const hasPrevPage = currentPage > 1;
const hasNextPage = currentPage < totalPages;
const startItem = totalCount > 0 ? (currentPage - 1) * pageSize + 1 : 0;
const endItem = (currentPage - 1) * pageSize + rows.length;

<div className="mt-4">
  <div className="flex justify-between items-center">
    <button disabled={!hasPrevPage} onClick={onPrevPage} className="...">
      <FaChevronLeft /> Previous
    </button>
    <div className="text-sm font-semibold">
      Page {currentPage} of {totalPages}
    </div>
    <button disabled={!hasNextPage} onClick={onNextPage} className="...">
      Next <FaChevronRight />
    </button>
  </div>
  <div className="text-center text-sm text-gray-600 mt-2">
    Showing {rows.length > 0 ? startItem : 0} to {rows.length > 0 ? endItem : 0} of {totalCount} items
  </div>
</div>
```

### References
- Proxy handler: [`src/lib/proxyHandler.ts`](mdc:src/lib/proxyHandler.ts)
- Example page: [`/admin/events/[id]/tickets/list`](http://localhost:3000/admin/events/1/tickets/list)
- Admin dashboard: [`/admin`](mdc:http:/localhost:3000/admin)
- CSS: `src/styles/globals.css`
- Example Components: `src/components/EventList.tsx`, `src/app/admin/events/[id]/media/list/page.tsx`, `src/app/admin/manage-usage/page.tsx`

---

## 6. Responsive Button Group Grid

- **Rule:** Use a responsive grid for button groups at the top of admin pages (e.g., event tickets, ticket types) to ensure all navigation/action buttons are always visible, accessible, and visually centered on all screen sizes.

- **Mobile View (default):**
  - The grid uses `grid-cols-1` and is centered  with `justify-items-center mx-auto`.
  - Each button uses `w-48 max-w-xs mx-auto` to be compact and centered, not full width.
  - Use `p-1` and `text-xs` for the button, and `text-base` for the icon.
  - The button group appears as a perfectly centered, vertically stacked set of compact buttons.

- **Tablet/Desktop (sm and up):**
  - Use `sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-6` for the grid.
  - Button padding increases to `sm:p-2`, icon to `sm:text-lg`.

- **General:**
  - Wrap the grid in a `w-full overflow-x-auto` container to allow horizontal scrolling on very small screens.
  - All buttons are always visible, never cut off, and the group is horizontally scrollable if needed.
  - All buttons must be keyboard accessible and have clear focus/hover states.

- **Example Implementation:**
  ```tsx
  <div className="w-full overflow-x-auto">
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-2 mb-6 justify-items-center mx-auto">
      <Link href="/admin/manage-usage" className="w-48 max-w-xs mx-auto flex flex-col items-center justify-center bg-blue-50 hover:bg-blue-100 text-blue-800 rounded-md shadow p-1 sm:p-2 text-xs sm:text-xs transition-all">
        <FaUsers className="text-base sm:text-lg mb-1 mx-auto" />
        <span className="font-semibold text-center leading-tight">Manage Usage<br />[Users]</span>
      </Link>
      {/* ...other buttons... */}
    </div>
  </div>
  ```
- **References:**
  - Tickets list page: [`/admin/events/[id]/tickets/list`](http://localhost:3000/admin/events/1/tickets/list)
  - Ticket-types list page: [`/admin/events/[id]/ticket-types/list`](http://localhost:3000/admin/events/1/ticket-types/list)
  - Example file: `src/app/admin/events/[id]/tickets/list/page.tsx`
  - Example file: `src/app/admin/events/[id]/ticket-types/list/page.tsx`

---

## 7. Date & Timezone Formatting

### Date Display Standards

- **Rule:** Always display event dates and times using the event's intended timezone, not the user's local timezone.
- **Purpose:** Prevents off-by-one-day errors and ensures all users see the correct event date as intended by organizers.

#### Implementation

- **Use `date-fns-tz` for formatting:**
  - Install with:
    ```bash
    npm install date-fns date-fns-tz
    ```
  - Import and use in your component:
    ```tsx
    import { formatInTimeZone } from 'date-fns-tz';

    // Example usage:
    <span>
      {formatInTimeZone(eventDetails.startDate, eventDetails.timezone, 'EEEE, MMMM d, yyyy (zzz)')}
    </span>
    ```
    - `eventDetails.startDate` should be a string in `YYYY-MM-DD` format.
    - `eventDetails.timezone` should be an IANA timezone string (e.g., `"America/New_York"`).
    - The format string `'EEEE, MMMM d, yyyy (zzz)'` will display:
      `Wednesday, August 7, 2025 (EDT)`

- **Never use `new Date('YYYY-MM-DD')` for display.**
  - This parses as UTC and can cause the date to appear as the previous day in US timezones.

- **Always store and use the IANA timezone name in the DTO/database.**
  - Example: `"America/New_York"`, not `"EST"` or `"PST"`.

#### UI Example

```tsx
<div className="flex items-center gap-2">
  <FaCalendarAlt />
  <span>
    {formatInTimeZone(eventDetails.startDate, eventDetails.timezone, 'EEEE, MMMM d, yyyy (zzz)')}
  </span>
</div>
```

#### References
- See: `src/app/event/success/page.tsx` for a working implementation.
- DTO: `EventDetailsDTO` in `src/types/index.ts` (must include a `timezone: string` field).

---

## References
- **CSS:** `src/styles/globals.css`
- **Example Pages:**
  - `src/app/admin/events/[id]/media/list/page.tsx`
  - `src/app/admin/manage-usage/page.tsx`
  - `src/components/EventList.tsx`












